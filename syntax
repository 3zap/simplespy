local m=game:GetService("TextService")local v=game:GetService("RunService")local g={}local k local Z local r local L local M={}local y={}local J=0 local c=0 local T=15 local X=Enum.Font.Ubuntu local R=14 local s=Color3.fromRGB(40,44,52)local W=Color3.fromRGB(187,85,255)local O=Color3.fromRGB(97,175,239)local w=Color3.fromRGB(152,195,121)local G=Color3.fromRGB(209,154,102)local p=G local S=Color3.fromRGB(229,192,123)local d=Color3.fromRGB(224,108,117)local n=Color3.fromRGB(148,148,148)local I=n local Y=Color3.fromRGB(240,240,240)local B={"^(function)[^%w_]","^(local)[^%w_]","^(if)[^%w_]";"^(for)[^%w_]";"^(while)[^%w_]";"^(then)[^%w_]";"^(do)[^%w_]","^(else)[^%w_]";"^(elseif)[^%w_]";"^(return)[^%w_]","^(end)[^%w_]","^(continue)[^%w_]";"^(and)[^%w_]";"^(not)[^%w_]","^(or)[^%w_]";"[^%w_](or)[^%w_]","[^%w_](and)[^%w_]";"[^%w_](not)[^%w_]","[^%w_](continue)[^%w_]","[^%w_](function)[^%w_]";"[^%w_](local)[^%w_]","[^%w_](if)[^%w_]";"[^%w_](for)[^%w_]","[^%w_](while)[^%w_]","[^%w_](then)[^%w_]";"[^%w_](do)[^%w_]";"[^%w_](else)[^%w_]";"[^%w_](elseif)[^%w_]","[^%w_](return)[^%w_]","[^%w_](end)[^%w_]"}local N={{"\"","\""};{"\'";"\'"},{"%[%[";"%]%]";true}}local Q={"%-%-%[%[[^%]%]]+%]?%]?";"(%-%-[^\n]+)"}local V={"[^%w_]([%a_][%a%d_]*)%s*%(";"^([%a_][%a%d_]*)%s*%(";"[:%.%(%[%p]([%a_][%a%d_]*)%s*%("}local q={"[^%w_](%d+[eE]?%d*)";"[^%w_](%.%d+[eE]?%d*)","[^%w_](%d+%.%d+[eE]?%d*)";"^(%d+[eE]?%d*)";"^(%.%d+[eE]?%d*)","^(%d+%.%d+[eE]?%d*)"}local A={"[^%w_](true)","^(true)","[^%w_](false)","^(false)";"[^%w_](nil)";"^(nil)"}local h={"[^%w_:]([%a_][%a%d_]*):","^([%a_][%a%d_]*):"}local l={"[^_%s%w=>~<%-%+%*]",">","~";"<";"%-";"%+";"=";"%*"}local u={}function isOffLimits(m)for v,g in pairs(u)do if m>=g[1]and m<=g[2]then return true end end return false end function gfind(m,v)local g=0 return function()local k,Z=m:find(v,g)if k and Z~=#m then g=Z+1 return k,Z else return nil end end end function renderComments()local m=g:getRaw()for v,g in pairs(Q)do for m,v in gfind(m,g)do if not isOffLimits(m)then for g=m,v,1 do table.insert(u,{m;v})if y[g]then y[g].Color=n end end end end end end function renderStrings()local m local v local g local k local Z local r local L=false for M,J in pairs(y)do if m then J.Color=w local c=""for m=k,M,1 do c=c..y[m].Char end if J.Char:match(v)and not(not g)or c:match("(\\*)"..(v.."$"))and#c:match("(\\*)"..(v.."$"))%2==0 then L=true m=nil v=nil g=nil Z=M u[r][2]=Z end end if not L then for Z,L in pairs(N)do if J.Char:match(L[1])and not isOffLimits(M)then m=L[1]v=L[2]g=L[3]J.Color=w k=M r=#u+1 u[r]={k,math.huge}end end end L=false end end function highlightPattern(m,v)local k=g:getRaw()for m,g in pairs(m)do for m,g in gfind(k,g)do if not isOffLimits(m)and not isOffLimits(g)then for m=m,g,1 do if y[m]then y[m].Color=v end end end end end end function autoEscape(m)m:gsub("<","&lt;")m:gsub(">","&gt;")m:gsub("\"","&quot;")m:gsub("\'","&apos;")m:gsub("&","&amp;")return m end function render()u={}M={}r:ClearAllChildren()L:ClearAllChildren()highlightPattern(V,O)highlightPattern(q,G)highlightPattern(B,W)highlightPattern(h,S)highlightPattern(A,p)highlightPattern(l,Y)renderComments()renderStrings()local g local k=""local Z=""c=0 J=1 for M=1,#y+1,1 do local s=y[M]if M==#y+1 or s.Char=="\n"then k=k..(g and"</font>"or"")local s=Instance.new("TextLabel")local W=(m:GetTextSize(Z,R,X,Vector2.new(math.huge,math.huge))).X+60 if W>c then c=W end s.TextXAlignment=Enum.TextXAlignment.Left s.TextYAlignment=Enum.TextYAlignment.Top s.Position=UDim2.new(0,0,0,J*T-T/2)s.Size=UDim2.new(0,W,0,R)s.RichText=true s.Font=X s.TextSize=R s.BackgroundTransparency=1 s.Text=k s.Parent=r if M~=#y+1 then local m=Instance.new("TextLabel")m.Text=J m.Font=X m.TextSize=R m.Size=UDim2.new(1,0,0,T)m.TextXAlignment=Enum.TextXAlignment.Right m.TextColor3=I m.Position=UDim2.new(0,0,0,J*T-T/2)m.BackgroundTransparency=1 m.Parent=L end k=""Z=""g=nil J=J+1 updateZIndex()updateCanvasSize()v.Heartbeat:Wait()elseif s.Char==" "then k=k..s.Char Z=Z..s.Char elseif s.Char=="\t"then k=k..string.rep(" ",4)Z=Z..s.Char else if s.Color==g then k=k..autoEscape(s.Char)else k=k..string.format("%s<font color=\"rgb(%d,%d,%d)\">",g and"</font>"or"",s.Color.R*255,s.Color.G*255,s.Color.B*255)k=k..autoEscape(s.Char)g=s.Color end Z=Z..s.Char end end updateZIndex()updateCanvasSize()end function onFrameSizeChange()local m=k.AbsoluteSize Z.Size=UDim2.new(0,m.X,0,m.Y)end function updateCanvasSize()Z.CanvasSize=UDim2.new(0,c,0,J*T)end function updateZIndex()for m,v in pairs(k:GetDescendants())do if v:IsA("GuiObject")then v.ZIndex=k.ZIndex end end end function g.init(v,m)if typeof(m)=="Instance"and m:IsA("Frame")then m:ClearAllChildren()k=m Z=Instance.new("ScrollingFrame")r=Instance.new("Frame")L=Instance.new("Frame")local v=m.AbsoluteSize Z.Name="HIGHLIGHT_IDE"Z.Size=UDim2.new(0,v.X,0,v.Y)Z.BackgroundColor3=s Z.BorderSizePixel=0 Z.ScrollBarThickness=4 r.Name=""r.Size=UDim2.new(1,-40,1,0)r.Position=UDim2.new(0,40,0,0)r.BackgroundTransparency=1 L.Name=""L.Size=UDim2.new(0,25,1,0)L.BackgroundTransparency=1 r.Parent=Z L.Parent=Z Z.Parent=k render();(k:GetPropertyChangedSignal("AbsoluteSize")):Connect(onFrameSizeChange);(k:GetPropertyChangedSignal("ZIndex")):Connect(updateZIndex)else error("Initialization error: argument "..(typeof(m).." is not a Frame Instance"))end end function g.setRaw(v,m)m=m.."\n"y={}local g=1 for v=1,#m,1 do table.insert(y,{Char=m:sub(v,v);Color=d})end render()end function g.getRaw(m)local v=""for m,g in pairs(y)do v=v..g.Char end return v end function g.getString(m)local v=""for m,g in pairs(y)do v=v..g.Char:sub(1,1)end return v end function g.getTable(m)return y end function g.getSize(m)return#y end function g.getLine(v,m)local g=0 local k=false local Z=""for m,v in pairs(y)do g=g+1 if v.Char=="\n"and not k then k=true end if k and v.Char~="\n"then Z=Z..v.Char elseif k then break end end return Z end function g.setLine(k,m,v)if#y and m>=y[#y].Line then for m=y[#y].Line,m,1 do table.insert(y,{Char="\n",Line=m;Color=d})local k=g:getRaw()k=k:sub(0,#k)..v g:setRaw(k)return end elseif not(#y)then return end local Z=g:getRaw()local r=0 local L=0 for k in gfind(Z,"\n")do L=L+1 if m==L then Z=Z:sub(0,r)..(v..Z:sub(k,#Z))g:setRaw(Z)return end end error("Unable to set line")end function g.insertLine(k,m,v)if#y and m>=y[#y].Line then g:setLine(m,v)elseif not(#y)then return end local Z=g:getRaw()local r=0 local L=0 for k in gfind(Z,"\n")do L=L+1 if m==L then Z=Z:sub(0,r)..("\n"..(v..("\n"..Z:sub(k,#Z))))g:setRaw(Z)return end end error("Unable to insert line")end local P={}function P.new(...)local m=g local v={}m.__index=m setmetatable(v,m)v:init(...)return v end return P
